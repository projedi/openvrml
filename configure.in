AC_INIT(libvrml97core/src/vrml97/VrmlScene.cpp)

PACKAGE=openvrml
OPENVRML_MAJOR_VERSION="0"
OPENVRML_MINOR_VERSION="9"
OPENVRML_MICRO_VERSION="0"
VERSION="${OPENVRML_MAJOR_VERSION}.${OPENVRML_MINOR_VERSION}.${OPENVRML_MICRO_VERSION}pre2"
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(OPENVRML_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(OPENVRML_MINOR_VERSION)
AC_DEFINE_UNQUOTED(OPENVRML_MICRO_VERSION)

dnl
dnl Variables to build libantlr as a convenience library
dnl
NOINSTALL_LIBANTLR=libantlr.la
AC_SUBST(INSTALL_LIBANTLR)
AC_SUBST(NOINSTALL_LIBANTLR)
AC_SUBST(LIBANTLR_RPATH_FLAG)
ANTLR_INCLUDEDIR=/vrml97/antlr
AC_SUBST(ANTLR_INCLUDEDIR)

dnl
dnl Variables to build libjs as a convenience library
dnl
NOINST_LIBJS="libjs.la"
AC_SUBST(LIBJS)
AC_SUBST(NOINST_LIBJS)
AC_SUBST(JS_RPATH_LDFLAG)
JS_INCLUDE_DIR="\$(includedir)"
AC_SUBST(JS_INCLUDE_DIR)
JS_INCLUDE_FILES="jsapi.h jsautocfg.h jscompat.h jslong.h jsotypes.h jsosdep.h jspubtd.h jstypes.h"
AC_SUBST(JS_INCLUDE_FILES)
AM_CONDITIONAL(JS_PRELINK_FDLIBM, test "apple" = "orange")


dnl
dnl Checks for Win32 stuff
dnl
AC_CYGWIN
AC_MINGW32

dnl
dnl Checks for programs.
dnl
dnl AC_PROG_CC
dnl AC_PROG_CPP
AM_PROG_LIBTOOL
AC_PROG_INSTALL
dnl AM_PROG_LEX
dnl AC_PROG_YACC
AC_PROG_CXX
AC_PROG_CXXCPP


dnl
dnl Check for ANTLR
dnl

dnl Check for Java runtime
AC_PATH_PROG(JAVA, java, no)
if test X"$JAVA" = Xno; then
  have_antlr=no
else
  AC_MSG_CHECKING(for ANTLR)
  cat > conftest.g <<EOF
class ConfTest extends Parser;
stmt: "conftest";
EOF
  sh -c "$JAVA antlr.Tool conftest.g" 1>&5 2>&5
  if test $? = 0; then
    AC_MSG_RESULT(yes)
    have_antlr=yes
  else
    AC_MSG_RESULT(no)
    have_antlr=no
  fi
  rm -f conftest.g ConfTest.java ConfTestTokenTypes.java ConfTestTokenTypes.txt
fi
if test X"$have_antlr" = Xno; then
  AC_MSG_WARN(ANTLR not found. You will need ANTLR to recompile the parser grammar if you modify it.)
fi


dnl
dnl Check for libjpeg
dnl
OV_PATH_JPEG(, [libjpeg not found. Check 'config.log' for details.])

dnl
dnl Check for libpng, zlib
dnl
OV_PATH_PNG(, [libpng or zlib not found. Check 'config.log' for details.])

dnl
dnl Check for X, GL/Mesa, glut
dnl
OV_PATH_GLUT(, AC_MSG_ERROR([glut or one of its dependencies not found. See 'config.log' for details.]))

dnl
dnl Test for adequate namespace support in the C++ compiler
dnl
OV_CXX_NAMESPACE(
  ,
  no_cxx_namespaces=true
)
AM_CONDITIONAL(NO_CXX_NAMESPACES, test x$no_cxx_namespaces = xtrue)

OV_CXX_BOOL(
  ,
  AC_MSG_ERROR([Your C++ compiler does not have the required support for the 'bool' keyword. See 'config.log' for details.])
)


dnl Checks for library functions.
AC_CHECK_FUNCS(ftime getcwd gettimeofday mktime strdup strerror strstr)

dnl
dnl Modulate debug mode
dnl
AC_ARG_ENABLE(debug,
  [  --disable-debug         Turn off debugging],
  [
    case "${enableval}" in
      yes) debug=true ;;
      no)  debug=false ;;
      *)   AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
    esac
  ],
  [ debug=true ]
)
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

dnl
dnl JavaScript doesn't include config.h, so we have to use automake
dnl conditionals.
dnl
case "$target" in
  *-aix*)
    aix=true
    case `uname -r` in
      *4.3*)
        aix4_3=true
        AC_DEFINE(AIX4_3, ,[needed by jsotypes.h])
        ;;
    esac
    ;;
  *-freebsd*)
    freebsd=true
    ;;
esac
AM_CONDITIONAL(FREEBSD, test x$freebsd = xtrue)
AM_CONDITIONAL(AIX, test x$aix = xtrue)
AM_CONDITIONAL(AIX4_3, test x$aix4_3 = xtrue)

AC_OUTPUT(Makefile \
          macros/Makefile \
          models/Makefile \
          models/audio/Makefile \
          models/textures/Makefile \
          libvrml97core/Makefile \
          libvrml97core/src/Makefile \
          libvrml97core/src/vrml97/Makefile \
          libvrml97core/src/vrml97/Vrml97TokenTypes.txt \
          libvrml97core/src/vrml97/antlr/Makefile \
          libvrml97core/src/vrml97/javascript/Makefile \
          libvrml97core/src/vrml97/javascript/fdlibm/Makefile \
          libvrml97gl/Makefile \
          libvrml97gl/src/Makefile \
          libvrml97gl/src/vrml97gl/Makefile \
          lookat/Makefile \
          lookat/src/Makefile)
