AC_INIT(libvrml97core/src/vrml97/VrmlScene.cpp)

PACKAGE=libvrml97
LIBVRML97_MAJOR_VERSION="0"
LIBVRML97_MINOR_VERSION="8"
LIBVRML97_MICRO_VERSION="2"
VERSION="${LIBVRML97_MAJOR_VERSION}.${LIBVRML97_MINOR_VERSION}.${LIBVRML97_MICRO_VERSION}"
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_CONFIG_HEADER(config.h)

AC_DEFINE_UNQUOTED(LIBVRML97_MAJOR_VERSION)
AC_DEFINE_UNQUOTED(LIBVRML97_MINOR_VERSION)
AC_DEFINE_UNQUOTED(LIBVRML97_MICRO_VERSION)

dnl
dnl libtool library versions
dnl
  VRML97_LIBRARY_VERSION="1:0:0"
VRML97GL_LIBRARY_VERSION="0:1:0"
VRML97JS_LIBRARY_VERSION="0:0:0"
   ANTLR_LIBRARY_VERSION="0:0:0"
dnl                       | | |
dnl                +------+ | +---+
dnl                |        |     |
dnl             current:revision:age
dnl                |        |     |
dnl                |        |     +- Increment if interfaces have been added
dnl                |        |        Set to zero if interfaces have been removed
dnl                |        |        or changed
dnl                |        +- Increment if source code has changed
dnl                |           Set to zero if current is incremented
dnl                +- Increment if interfaces have been added, removed or
dnl                   changed
AC_SUBST(VRML97_LIBRARY_VERSION)
AC_SUBST(VRML97GL_LIBRARY_VERSION)
AC_SUBST(VRML97JS_LIBRARY_VERSION)

dnl
dnl Variables to build libantlr as a convenience library
dnl
AC_SUBST(ANTLR_LIBRARY_VERSION)
NOINSTALL_LIBANTLR=libantlr.la
AC_SUBST(INSTALL_LIBANTLR)
AC_SUBST(NOINSTALL_LIBANTLR)
AC_SUBST(LIBANTLR_RPATH_FLAG)
ANTLR_INCLUDEDIR=/vrml97/antlr
AC_SUBST(ANTLR_INCLUDEDIR)


dnl
dnl Checks for Win32 stuff
dnl
AC_CYGWIN
AC_MINGW32

dnl
dnl Checks for programs.
dnl
AC_PROG_CC
AC_PROG_CPP
AM_PROG_LIBTOOL
AC_PROG_INSTALL
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_CXX
AC_PROG_CXXCPP


dnl
dnl Check for ANTLR
dnl

dnl Check for Java runtime
AC_PATH_PROG(JAVA, java, no)
if test X"$JAVA" = Xno; then
  AC_MSG_ERROR(Java runtime not found. Check config.log for details.)
else
  AC_MSG_CHECKING(for ANTLR)
  cat > conftest.g <<EOF
class ConfTest extends Parser;
stmt: "conftest";
EOF
  sh -c "$JAVA antlr.Tool conftest.g" 1>&5 2>&5
  if test $? = 0; then
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
    AC_MSG_WARN(ANTLR not found. You will need ANTLR to recompile the parser grammar if you modify it.)
  fi
  rm -f conftest.g ConfTest.java ConfTestTokenTypes.java ConfTestTokenTypes.txt
fi


dnl
dnl Check for libjpeg
dnl
VRML_PATH_JPEG(, [libjpeg not found. Check 'config.log' for details.])

dnl
dnl Check for libpng, zlib
dnl
VRML_PATH_PNG(, [libpng or zlib not found. Check 'config.log' for details.])

dnl
dnl Check for X, GL/Mesa, glut
dnl
VRMLGL_PATH_GLUT(, AC_MSG_ERROR([glut or one of its dependencies not found. See 'config.log' for details.]))

dnl
dnl Test for adequate namespace support in the C++ compiler
dnl
VRML_CXX_NAMESPACE(
  ,
  no_cxx_namespaces=true
)
AM_CONDITIONAL(NO_CXX_NAMESPACES, test x$no_cxx_namespaces = xtrue)

VRML_CXX_BOOL(
  ,
  AC_MSG_ERROR([Your C++ compiler does not have the required support for the 'bool' keyword. See 'config.log' for details.])
)


dnl Checks for library functions.
AC_CHECK_FUNCS(ftime getcwd gettimeofday mktime strdup strerror strstr)

dnl
dnl Modulate debug mode
dnl
AC_ARG_ENABLE(debug,
  [  --disable-debug         Turn off debugging],
  [
    case "${enableval}" in
      yes) debug=true ;;
      no)  debug=false ;;
      *)   AC_MSG_ERROR([bad value ${enableval} for --enable-debug]) ;;
    esac
  ],
  [ debug=true ]
)
AM_CONDITIONAL(DEBUG, test x$debug = xtrue)

dnl
dnl Stuff for JavaScript
dnl
AC_DEFINE(XP_UNIX, ,[JavaScript requires this])

dnl
dnl JavaScript doesn't include config.h, so we have to use automake
dnl conditionals.
dnl
case "$target" in
  *-aix*)
    aix=true
    case `uname -r` in
      *4.3*)
        aix4_3=true
        AC_DEFINE(AIX4_3, ,[needed by jsotypes.h])
        ;;
    esac
    ;;
  *-freebsd*)
    freebsd=true
    ;;
esac
AM_CONDITIONAL(FREEBSD, test x$freebsd = xtrue)
AM_CONDITIONAL(AIX, test x$aix = xtrue)
AM_CONDITIONAL(AIX4_3, test x$aix4_3 = xtrue)

AC_OUTPUT(Makefile \
          m4/Makefile \
          libvrml97js/Makefile \
          libvrml97js/src/Makefile \
          libvrml97js/src/vrml97js/Makefile \
          libvrml97js/src/vrml97js/fdlibm/Makefile \
          libvrml97core/Makefile \
          libvrml97core/m4/Makefile \
          libvrml97core/src/Makefile \
          libvrml97core/src/vrml97/Makefile \
          libvrml97core/src/vrml97/Vrml97TokenTypes.txt \
          libvrml97core/src/vrml97/antlr/Makefile \
          libvrml97gl/Makefile \
          libvrml97gl/m4/Makefile \
          libvrml97gl/src/Makefile \
          libvrml97gl/src/vrml97gl/Makefile \
          lookat/Makefile \
          lookat/src/Makefile)
