OpenVRML library version 0.9.0, November, 2000
Copyright (C) 1998, 1999, 2000 Chris Morley <cmorley@vermontel.net>
Portions Copyright SGI and others

Available from <URL:http://openvrml.sourceforge.net>

See the NEWS file for a list of changes in this release.
See the TODO file for a list of things we are planning to implement for future
releases.


What is OpenVRML?
==================

OpenVRML is a portable C++ class library for reading and displaying VRML97
files.  This distribution includes Lookat, a sample viewer program that uses
GLUT.


How can I use it?
=================

This code is Free Software available under the terms of the Lesser General
Public License.  Refer to the file COPYING for details.


What else do I need?
====================

OpenVRML requires zlib, libpng, libjpeg, OpenGL/Mesa, and GLUT to build.  If
any of these are not already present on your system, first consult your
operating system vendor for packages tailored to your particular operating
system/distribution.  Failing that, consult the following URLs:

    zlib:       <http://www.cdrom.com/pub/infozip/zlib/>
    libpng:     <http://www.cdrom.com/pub/png/pngcode.html>
    libjpeg:    <http://www.ijg.org>
    Mesa:       <http://www.mesa3d.org>
    GLUT:       <http://reality.sgi.com/mjk_asd/glut3/>

OpenVRML also uses the ANTLR parser generator.  The generated sources come with
the distribution, and most users should never need to recompile the ANTLR
source.  For those who do, ANTLR can be found here:

    <http://www.antlr.org>


Installation
============

Refer to the file INSTALL for detailed installation instructions.


What VRML97 nodes are supported by OpenVRML?
======================================================

Details of the implementation status of each node can be found in NODES.  All of
the static geometry is supported except generation of per-vertex normals.  Text/
FontStyle node support is very limited.

Unimplemented:  drag sensors (CylinderSensor, PlaneSensor, and 
SphereSensor), navigation types other than examine.


System-specific notes
=====================

 * X11 colormap flashing on 8-bit displays

   If you are having trouble with colormap flashing on an 8-bit display, try
   restarting your X server (e.g., log out and back in in an xdm environment)
   and running "xstdcmap -default" BEFORE running anything else.  In fact, you
   might put that command in your X startup script.  But you should really get
   a graphics card with 24-bit color.  Tell your boss I said so.


Bug reports
===========

Please send bug reports to the OpenVRML mailing list,
openvrml-develop@sourceforge.net.  Subscription instructions are at
<http://lists.sourceforge.net/mailman/listinfo/openvrml-develop>.


Design
======

The very brief architecture description:

  * VrmlScene is the top-level class; a scene corresponds to reading in a VRML
    file (and all its associated data).  A VrmlScene object will have data
    members for the node type definitions (built-in and PROTOs/EXTERNPROTOs) and
    the actual nodes of the scene graph.  The variables are d_namespace and
    d_nodes, respectively.  You can pretty much ignore everything else in
    VrmlScene.

  * A VrmlNamespace is just a list of node type definitions and a list of node
    name definitions.  So if you want to find a particular named node in a
    scene, you would use the findNode method of the relevant namespace.  Each
    PROTO gets its own namespace.

  * Each built in node type has a corresponding VrmlNode* class.  PROTO'd node
    instances are represented by the VrmlNodeProto class.  Vrml nodes are built
    from the primitive field types, represented by the VrmlSF* and VrmlMF*
    (single- and multi-valued) classes.  For each field of each node as defined
    by the VRML97 spec there is a data member in the corresponding node class.
    For example, the Group node has a field called children of type MFNode.  The
    VrmlNodeGroup class has a data member VrmlMFNode d_children.  There is a lot
    of code, but it is pretty easy to find what you want once you understand
    the structure.
