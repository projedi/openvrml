#
# OpenVRML
#
# Copyright (C) 2001  S. K. bose
# 
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# 
.SILENT:
# Makefile for openvrmlcore
# Microsoft Visual C++6.0 or later

BINOUTDIR = .\bin
INTDIR = .\bin
LIBDIR = .\lib
SOURCE = ..\..\..\..\src\openvrml\OpenVRML
LIBINCLUDE = ..\..\..\..\lib
ANTLRLIBDIR = ..\tplib\antlr

help:
	more < <<
usage: nmake[.exe] /f Makefile.vc6 [options] [target]
where: [target] may be any one of the following ...
    (default)... shows this text
    core        ........ builds OpenVRMLcore library
    clean        ....... deletes all intermediate files

    ---- build options -----------------

   WITH_PNG = YES .................... - If it is YES, 
               then you must have libpng in your system and in 
               winconfig.h you must define HAVE_LIBPNG. This is default. 
               Otherwise build without PNG support (if you don't have 
               libpng or don't want PNG support),by giving WITH_PNG = NO. 
               You must undefine HAVE_LIBPNG in winconfig.h for this option.

   PNGLIB_DIR  .................... - required to be defined as 
			the path where your PNGLIB is installed. 
		   Default path is C:\User\lpng105, however you may provide 
		   it as an environment variable by doing something like 
		   this prior to execute nmake:

			 set PNGLIB_DIR=C:\lpng105
               However it is not needed, if you give option WITH_PNG=NO

   WITH_JPEG = YES .................... - If it is YES, 
               then you must have libjpeg in your system and in
               winconfig.h you must define HAVE_LIBJPEG. This is default.
               Otherwise build without JPEG support (if you don't have 
               libjpeg or don't want JPEG support), by giving 
               WITH_JPEG = NO. You must undefine HAVE_LIBJPEG in 
               winconfig.h for this option.


   JPEGLIB_DIR  .................... - required to be defined as the path
		   where your JPEGLIB is installed. 
		   Default path is C:\User\jpeg-6b, however you may provide
		   it as an environment variable by doing something like 
		   this prior to execute nmake:

			 set JPEGLIB_DIR=C:\jpeg-6b
               However it is not needed, if you give option WITH_JPEG=NO

   WITH_JAVASCRIPT = YES .................... - If it is YES, 
               then you must have js32.lib and js32.dll from mozilla in your 
               system and in winconfig.h you must define HAVE_MOZJS. This is 
               default. Otherwise build without JAVASCRIPT support (if you 
               don't have SpiderMonkey or don't want JAVASCRIPT support),
               by giving WITH_JAVASCRIPT = NO. You must undefine HAVE_MOZJS in 
               winconfig.h for this option.


   MOZILLALIB_DIR  .................... - required to be defined as the path
		   where your MOZILLALIB is installed. 
		   Default path is C:\User\mozilla, however you may provide
		   it as an environment variable by doing something like 
		   this prior to execute nmake:

			 set MOZILLALIB_DIR=C:\mozilla
               However it is not needed, if you give option WITH_JAVASCRIPT=NO


   ZLIB_DIR  .................... - required to be defined as the path
		   where your ZLIB is installed. Default path is C:\User\zlib,
		   however you may provide it as an environment variable by
		   doing something like this prior to execute nmake:

			 set ZLIB_DIR=C:\zlib

 

   WITH_ANTLR=YES  .................... - If it is YES, 
               then you must have java in your system and system will
               generate C++ code from antlr grammar(Vrml97Parser.g). 
               Otherwise it will take generated code(Vrml97Parser.cpp)
               and create the library. Default is NO.

   ANTLRLIB_DIR  .................... - required to be defined as the path
               where your antlr is installed. If you define WITH_ANTLR=YES 
               then you must give this path. Otherwise it is not needed. 
               Default path is C:\User\antlr, however you may provide it 
               as an environment variable by doing something like this 
               prior to execute nmake:

			 set ANTLRLIB_DIR=C:\antlr-2.7.0
               However it is not needed, if you give option WITH_ANTLR=NO


   LIBTYPE    ...................... required to be defined as the type
              of OpenVRMLcore library. It can be static or dynamic(dll)
              library. Default is to make dynamic library. However if
              you want to make static library then you may provide it
              as an environment variable by doing something like 
              this prior to execute nmake:

			 set LIBTYPE=STATIC

  

    ---- makefile Author (bose@pavan.barc.ernet.in) notes ------------------
         OpenVRML was originally written by Chris Morley
	 (http://www.vermontel.net/~cmorley/. He has donated it 
	 as a foundation for OVAL development and is currently 
	 maintained at http://openvrml.sourceforge.net

    This makefile suite built against MS Visual C++ 6.0 and tested on
    WindowsNT 4.0, Windows95, and Windows98.

    ---- output directories as configured -------

    Linking Libs . : $(LIBDIR)
    Object Files . : $(BINOUTDIR)

<<
!IF "$(OS)" == "Windows_NT"
NUL = NUL: 
!ELSE
NUL = nul
!ENDIF

!IF "$(WITH_PNG)" == ""
WITH_PNG = YES
!ENDIF

!IF "$(PNGLIB_DIR)" == ""
PNGLIB_DIR = c:\User\lpng105
!ENDIF

!IF "$(WITH_JPEG)" == ""
WITH_JPEG = YES
!ENDIF

!IF "$(JPEGLIB_DIR)" == ""
JPEGLIB_DIR = c:\User\jpeg-6b
!ENDIF

!IF "$(WITH_JAVASCRIPT)" == ""
WITH_JAVASCRIPT = YES
!ENDIF

!IF "$(MOZILLALIB_DIR)" == ""
MOZILLALIB_DIR = c:\User\mozilla
!ENDIF


!IF "$(ZLIB_DIR)" == ""
ZLIB_DIR = c:\User\zlib
!ENDIF

!IF "$(WITH_ANTLR)" == ""
WITH_ANTLR = NO
!ENDIF


!IF "$(ANTLRLIB_DIR)" == ""
ANTLRLIB_DIR = c:\User\antlr-2.7.0
!ENDIF


PROMPT :
      -@echo Making openvrmlcore library

$(BINOUTDIR) : 
	   if not exist $(BINOUTDIR) mkdir $(BINOUTDIR)

$(LIBDIR) : 
	   if not exist $(LIBDIR) mkdir $(LIBDIR)

CPP = cl.exe

!IF "$(LIBTYPE)" == "STATIC"
CFLAGS = /nologo /MD /W0 /GR /GX /O2 /D "WIN32" /D "_WINDOWS"\
	/Fp"$(INTDIR)\openvrmlcore.pch" /YX /Fo"$(INTDIR)\\"\
	/Fd"$(INTDIR)\\" /FD /c /D "NDEBUG"
!ELSE
CFLAGS = /nologo /MD /W0 /GR /GX /O2 /D "WIN32" /D "_WINDOWS" \
	/D DLL_EXPORT /Fp"$(INTDIR)\openvrmlcore.pch" /YX /Fo"$(INTDIR)\\"\
	/Fd"$(INTDIR)\\" /FD /c /D "NDEBUG"
!ENDIF

O=.obj
LIB32 = link.exe -lib

COMMONLIB = $(ZLIB_DIR)\zlib.lib\
!IF "$(WITH_PNG)" == "YES"
 $(PNGLIB_DIR)\libpng.lib\
!ENDIF
!IF "$(WITH_JAVASCRIPT)" == "YES"
 $(MOZILLALIB_DIR)\js32.lib\
!ENDIF
!IF "$(WITH_JPEG)" == "YES"
 $(JPEGLIB_DIR)\libjpeg.lib\
!ENDIF

LINK32 = link.exe
LINKFLAGS = wsock32.lib /nologo /subsystem:windows /dll /incremental:no\
 /pdb:"$(LIBDIR)/openvrmlcore.pdb" /machine:I386 /NODEFAULTLIB:LIBC



# variables

OBJ1 = $(BINOUTDIR)\Audio$(O) $(BINOUTDIR)\Doc$(O) $(BINOUTDIR)\Doc2$(O) $(BINOUTDIR)\dummysound$(O)\
       $(BINOUTDIR)\field$(O) $(BINOUTDIR)\Image$(O) $(BINOUTDIR)\MathUtils$(O) \
       $(BINOUTDIR)\Vrml97Parser$(O) \
       $(BINOUTDIR)\ScriptObject$(O) $(BINOUTDIR)\ScriptJDK$(O)\
      $(BINOUTDIR)\System$(O) $(BINOUTDIR)\Viewer$(O)\
      $(BINOUTDIR)\VrmlNamespace$(O) $(BINOUTDIR)\VrmlNode$(O)\
      $(BINOUTDIR)\VrmlNodeProto$(O) $(BINOUTDIR)\VrmlNodePtr$(O) $(BINOUTDIR)\Route$(O) \
       $(BINOUTDIR)\VrmlNodeScript$(O) $(BINOUTDIR)\VrmlNodeType$(O) $(BINOUTDIR)\VrmlScene$(O)\
	$(BINOUTDIR)\VrmlAABox$(O) $(BINOUTDIR)\VrmlBSphere$(O)\
      $(BINOUTDIR)\VrmlBVolume$(O) $(BINOUTDIR)\VrmlFrustum$(O) $(BINOUTDIR)\VrmlRenderContext$(O) \
	$(BINOUTDIR)\VrmlNodeVisitor$(O) $(BINOUTDIR)\vrml97node$(O)  

clean:
 if exist $(LIBDIR) del /Q $(LIBDIR)
 if exist $(LIBDIR) rmdir $(LIBDIR)
 if exist $(BINOUTDIR) del /Q $(BINOUTDIR)
 if exist $(BINOUTDIR) rmdir $(BINOUTDIR)
!IF "$(WITH_ANTLR)" == "YES"
      if exist Vrml97Parser.cpp del Vrml97Parser.cpp
      if exist Vrml97Parser.hpp del Vrml97Parser.hpp
      if exist Vrml97ParserTokenTypes.hpp del Vrml97ParserTokenTypes.hpp
      if exist Vrml97ParserTokenTypes.txt del Vrml97ParserTokenTypes.txt
      if exist vrml97tokentypes.txt del vrml97tokentypes.txt
!endif
   cd $(MAKEDIR)

all : core

core  : \
!IF "$(LIBTYPE)" == "STATIC"  
     prompt $(BINOUTDIR) $(LIBDIR) $(LIBDIR)\openvrmlcore.lib
!ELSE
     prompt $(BINOUTDIR) $(LIBDIR) $(LIBDIR)\openvrmlcore.dll
!ENDIF

$(LIBDIR)\openvrmlcore.lib : ant $(OBJ1)
                   if exist $(LIBDIR) del /Q $(LIBDIR)
                   $(LIB32) /nologo /out:$(LIBDIR)\openvrmlcore.lib\
                   $(COMMONLIB) wsock32.lib\
				   $(ANTLRLIBDIR)\lib\libantlr.lib $(OBJ1)

$(LIBDIR)\openvrmlcore.dll :  ant $(OBJ1) 		       
                          if exist $(LIBDIR) del /Q $(LIBDIR)
                           $(LINK32) $(LINKFLAGS) /out:$(LIBDIR)\openvrmlcore.dll\
		      	           /implib:$(LIBDIR)\openvrmlcore.lib \
						   $(COMMONLIB)\
                           $(ANTLRLIBDIR)\lib\libantlr.lib \
                           $(OBJ1) 


ant:
  cd $(ANTLRLIBDIR)
  nmake /F Makefile.vc6 antlr
  cd $(MAKEDIR)

$(BINOUTDIR)\Audio.obj :  $(SOURCE)\Audio.cpp $(SOURCE)\Audio.h $(SOURCE)\Doc.h \
						  $(SOURCE)\common.h $(SOURCE)\System.h	
            			  $(CPP) $(CFLAGS) /I $(ZLIB_DIR) $(SOURCE)\Audio.cpp

$(BINOUTDIR)\Doc.obj :  $(SOURCE)\Doc.cpp $(SOURCE)\Doc.h ..\winconfig.h $(SOURCE)\common.h\
						$(SOURCE)\doc2.hpp $(SOURCE)\System.h
						$(CPP) $(CFLAGS) /I ..\  /I $(ZLIB_DIR) $(SOURCE)\Doc.cpp

$(BINOUTDIR)\Doc2.obj :  $(SOURCE)\Doc2.cpp $(SOURCE)\Doc2.hpp ..\winconfig.h $(SOURCE)\common.h\
						 $(SOURCE)\System.h
            			$(CPP) $(CFLAGS) /I ..\ /I $(ZLIB_DIR) $(SOURCE)\Doc2.cpp

$(BINOUTDIR)\dummysound.obj : $(SOURCE)\dummysound.cpp $(SOURCE)\sound.h
    						$(CPP) $(CFLAGS) $(SOURCE)\dummysound.cpp

$(BINOUTDIR)\field.obj :    $(SOURCE)\field.cpp $(SOURCE)\field.h \
								$(SOURCE)\MathUtils.h \
								$(SOURCE)\VrmlNodePtr.h\
								$(SOURCE)\common.h 
								$(CPP) $(CFLAGS) $(SOURCE)\field.cpp

$(BINOUTDIR)\Image.obj :  $(SOURCE)\Image.cpp $(SOURCE)\Image.h $(SOURCE)\common.h \
						  $(SOURCE)\Doc.h $(SOURCE)\field.h\
						  $(SOURCE)\System.h ..\winconfig.h
            			  $(CPP) $(CFLAGS) /I $(ZLIB_DIR)\
!IF "$(WITH_PNG)" == "YES"
						  /I $(PNGLIB_DIR)\
!ENDIF
!IF "$(WITH_JPEG)" == "YES"
						  /I $(JPEGLIB_DIR)\
!ENDIF
						  /I ..\ /D XMD_H $(SOURCE)\Image.cpp
						   						   							 
$(BINOUTDIR)\MathUtils.obj : $(SOURCE)\MathUtils.cpp $(SOURCE)\MathUtils.h 
							$(CPP) $(CFLAGS) $(SOURCE)\MathUtils.cpp

$(BINOUTDIR)\Route.obj : $(SOURCE)\Route.cpp $(SOURCE)\Route.h $(SOURCE)\common.h \
 						$(SOURCE)\VrmlNodePtr.h 
	                    	$(CPP) $(CFLAGS) $(SOURCE)\Route.cpp

$(BINOUTDIR)\ScriptObject.obj : $(SOURCE)\ScriptObject.cpp $(SOURCE)\ScriptObject.h\
	             		$(SOURCE)\common.h
					$(CPP) $(CFLAGS) $(SOURCE)\ScriptObject.cpp


$(BINOUTDIR)\ScriptJDK.obj : $(SOURCE)\ScriptJDK.cpp $(SOURCE)\ScriptJDK.h\
								$(SOURCE)\Doc.h\
								$(SOURCE)\System.h\
								$(SOURCE)\field.h\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\vrml97Node.h\
								$(SOURCE)\VrmlNodeScript.h\
								$(SOURCE)\VrmlScene.h\
								$(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNodeType.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS)  /I $(ZLIB_DIR)\
								/I ..\ $(SOURCE)\ScriptJDK.cpp


$(BINOUTDIR)\System.obj : $(SOURCE)\System.cpp $(SOURCE)\System.h $(SOURCE)\common.h 
						 $(CPP) $(CFLAGS) $(SOURCE)\System.cpp

$(BINOUTDIR)\Viewer.obj :   $(SOURCE)\Viewer.cpp $(SOURCE)\Viewer.h\
							$(SOURCE)\MathUtils.h\
							$(SOURCE)\VrmlFrustum.h\
							$(SOURCE)\field.h\
							$(SOURCE)\VrmlBVolume.h\
							$(SOURCE)\VrmlBSphere.h\
							$(SOURCE)\VrmlAABox.h\
							$(SOURCE)\VrmlScene.h\
							$(SOURCE)\common.h \
							..\winconfig.h
							$(CPP) $(CFLAGS) /I ..\ $(SOURCE)\Viewer.cpp

$(BINOUTDIR)\vrml97node.obj :   $(SOURCE)\vrml97node.cpp $(SOURCE)\vrml97node.h \
									$(SOURCE)\VrmlNodeType.h\
									$(SOURCE)\VrmlNamespace.h\
									$(SOURCE)\VrmlNodeVisitor.h\
									$(SOURCE)\VrmlNodeProto.h\
									$(SOURCE)\Doc.h\
									$(SOURCE)\doc2.hpp\
									$(SOURCE)\Audio.h\
									$(SOURCE)\Sound.h\
									$(SOURCE)\MathUtils.h\
									$(SOURCE)\Viewer.h\
									$(SOURCE)\field.h\
									$(SOURCE)\VrmlNode.h\
									$(SOURCE)\Image.h\
									$(SOURCE)\VrmlScene.h\
									$(SOURCE)\common.h \
									..\winconfig.h
									$(CPP) $(CFLAGS) /I ..\ $(SOURCE)\vrml97node.cpp


!IF "$(WITH_ANTLR)" == "YES"

Vrml97Parser.cpp     :                $(SOURCE)\vrml97parser.g $(SOURCE)\Vrml97TokenTypes.txt 
						   copy $(SOURCE)\Vrml97TokenTypes.txt vrml97tokentypes.txt
						   SET CLASSPATH=$(ANTLRLIB_DIR)
						   java antlr.Tool $(SOURCE)\vrml97parser.g

$(BINOUTDIR)\Vrml97Parser.obj  :       Vrml97Parser.cpp $(SOURCE)\Doc2.hpp\
                                       $(SOURCE)\field.h $(SOURCE)\common.h \
						   $(SOURCE)\VrmlNamespace.h $(SOURCE)\VrmlNode.h\
						   $(SOURCE)\VrmlNodeScript.h $(SOURCE)\VrmlNodeType.h
						   $(CPP) $(CFLAGS) /GR /I $(LIBINCLUDE) /I $(SOURCE) /I . Vrml97Parser.cpp

!ELSE
$(BINOUTDIR)\Vrml97Parser.obj  :       $(SOURCE)\Vrml97Parser.cpp $(SOURCE)\Doc2.hpp\
                                       $(SOURCE)\field.h $(SOURCE)\common.h \
						   $(SOURCE)\VrmlNamespace.h $(SOURCE)\VrmlNode.h\
						   $(SOURCE)\VrmlNodeScript.h $(SOURCE)\VrmlNodeType.h
						   $(CPP) $(CFLAGS) /GR /I $(LIBINCLUDE) /I $(SOURCE) $(SOURCE)\Vrml97Parser.cpp

!ENDIF


$(BINOUTDIR)\VrmlAABox.obj : $(SOURCE)\VrmlAABox.cpp $(SOURCE)\VrmlAABox.h\
							 $(SOURCE)\VrmlFrustum.h $(SOURCE)\VrmlBVolume.h\
							 $(SOURCE)\VrmlBSphere.h $(SOURCE)\common.h 							
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlAABox.cpp

$(BINOUTDIR)\VrmlBSphere.obj : $(SOURCE)\VrmlBSphere.cpp $(SOURCE)\VrmlBSphere.h\
								$(SOURCE)\VrmlFrustum.h $(SOURCE)\VrmlBVolume.h\
								$(SOURCE)\VrmlBSphere.h $(SOURCE)\common.h\
								$(SOURCE)\VrmlAABox.h $(SOURCE)\field.h $(SOURCE)\MathUtils.h  							
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlBSphere.cpp

$(BINOUTDIR)\VrmlBVolume.obj : $(SOURCE)\VrmlBVolume.cpp $(SOURCE)\VrmlBVolume.h							
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlBVolume.cpp

$(BINOUTDIR)\VrmlFrustum.obj : $(SOURCE)\VrmlFrustum.cpp $(SOURCE)\VrmlFrustum.h\
								$(SOURCE)\MathUtils.h $(SOURCE)\common.h 							
								$(CPP) $(CFLAGS) /I ..\ $(SOURCE)\VrmlFrustum.cpp

    
$(BINOUTDIR)\VrmlNamespace.obj :  $(SOURCE)\VrmlNamespace.cpp $(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNodeType.h\
								$(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNodeVisitor.h\
								$(SOURCE)\field.h\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\Route.h\
								$(SOURCE)\VrmlNodeScript.h\
								$(SOURCE)\VrmlNodeProto.h\
								$(SOURCE)\common.h 
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlNamespace.cpp


$(BINOUTDIR)\VrmlNode.obj :  $(SOURCE)\VrmlNode.cpp $(SOURCE)\VrmlNode.h\
								$(SOURCE)\MathUtils.h\
								$(SOURCE)\VrmlNodePtr.h\
								$(SOURCE)\Route.h\
								$(SOURCE)\VrmlBVolume.h\
								$(SOURCE)\VrmlBSphere.h\
								$(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\VrmlNodeType.h\
								$(SOURCE)\VrmlScene.h\
								$(SOURCE)\VrmlRenderContext.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlNode.cpp

$(BINOUTDIR)\VrmlNodeProto.obj: $(SOURCE)\VrmlNodeProto.cpp\
								$(SOURCE)\VrmlNodeVisitor.h\
								$(SOURCE)\Viewer.h\
								$(SOURCE)\field.h\
								$(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\VrmlNodeProto.h\
								$(SOURCE)\VrmlNodeType.h\
								$(SOURCE)\Route.h\
								$(SOURCE)\VrmlBSphere.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlNodeProto.cpp

$(BINOUTDIR)\VrmlNodePtr.obj: $(SOURCE)\VrmlNodePtr.cpp\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\VrmlNodePtr.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlNodePtr.cpp

$(BINOUTDIR)\VrmlNodeScript.obj: $(SOURCE)\VrmlNodeScript.cpp\
					   $(SOURCE)\VrmlNodeScript.h\
                                 $(SOURCE)\doc2.hpp \
	                           $(SOURCE)\common.h \
					   $(SOURCE)\VrmlNode.h \
					   $(SOURCE)\VrmlNodeScript.h \
                                 $(SOURCE)\VrmlNamespace.h\
					   $(SOURCE)\VrmlNodeType.h\
					   $(SOURCE)\ScriptObject.h\
					   $(SOURCE)\VrmlScene.h\
					   ..\winconfig.h
					   $(CPP) $(CFLAGS)\
!IF "$(WITH_JAVASCRIPT)" == "YES"
					   /I $(MOZILLALIB_DIR)\
!ENDIF
					    /I $(ZLIB_DIR) /I ..\ \
					    /D XP_PC $(SOURCE)\VrmlNodeScript.cpp



$(BINOUTDIR)\VrmlNodeType.obj : $(SOURCE)\VrmlNodeType.cpp\
								$(SOURCE)\Doc2.hpp\
								$(SOURCE)\field.h\
								$(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\VrmlNode.h\
								$(SOURCE)\VrmlNodePtr.h\
								$(SOURCE)\VrmlNodeProto.h\
								$(SOURCE)\VrmlScene.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS) /I $(ZLIB_DIR)\
							      $(SOURCE)\VrmlNodeType.cpp

$(BINOUTDIR)\VrmlNodeVisitor.obj : $(SOURCE)\VrmlNodeVisitor.cpp\
								$(SOURCE)\VrmlNodeVisitor.h\
								$(SOURCE)\vrml97node.h\
								$(SOURCE)\field.h\
								$(SOURCE)\common.h
								$(CPP) $(CFLAGS) /I $(ZLIB_DIR)\
							      $(SOURCE)\VrmlNodeVisitor.cpp

$(BINOUTDIR)\VrmlRenderContext.obj : $(SOURCE)\VrmlRenderContext.cpp $(SOURCE)\VrmlRenderContext.h\
								$(SOURCE)\VrmlBVolume.h 							
								$(CPP) $(CFLAGS) $(SOURCE)\VrmlRenderContext.cpp

$(BINOUTDIR)\VrmlScene.obj : $(SOURCE)\VrmlScene.cpp\
								$(SOURCE)\Doc2.hpp $(SOURCE)\System.h\
								$(SOURCE)\Viewer.h\
								$(SOURCE)\MathUtils.h\
								$(SOURCE)\vrml97node.h $(SOURCE)\VrmlNamespace.h\
								$(SOURCE)\Vrml97Parser.hpp \
								$(SOURCE)\VrmlRenderContext.h\
								$(SOURCE)\VrmlNodeType.h\
								$(SOURCE)\VrmlScene.h\
								$(SOURCE)\common.h\
								..\winconfig.h
								$(CPP) $(CFLAGS)  /GR /I $(LIBINCLUDE) /I ..\ /I $(ZLIB_DIR) $(SOURCE)\VrmlScene.cpp




